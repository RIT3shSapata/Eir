/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Hospital {
  export type PatientStruct = {
    uid_check: PromiseOrValue<boolean>;
    p_add: PromiseOrValue<string>;
    uid: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    age: PromiseOrValue<BigNumberish>;
    weight: PromiseOrValue<BigNumberish>;
    w3name: PromiseOrValue<string>;
    doctors: PromiseOrValue<string>[];
  };

  export type PatientStructOutput = [
    boolean,
    string,
    BigNumber,
    string,
    number,
    number,
    string,
    string[]
  ] & {
    uid_check: boolean;
    p_add: string;
    uid: BigNumber;
    name: string;
    age: number;
    weight: number;
    w3name: string;
    doctors: string[];
  };

  export type DoctorStruct = {
    uid_check: PromiseOrValue<boolean>;
    d_add: PromiseOrValue<string>;
    uid: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    age: PromiseOrValue<BigNumberish>;
    reg_no: PromiseOrValue<BigNumberish>;
    ph_no: PromiseOrValue<BigNumberish>;
    patients: PromiseOrValue<string>[];
  };

  export type DoctorStructOutput = [
    boolean,
    string,
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    uid_check: boolean;
    d_add: string;
    uid: BigNumber;
    name: string;
    age: number;
    reg_no: BigNumber;
    ph_no: BigNumber;
    patients: string[];
  };
}

export interface HospitalInterface extends utils.Interface {
  functions: {
    "PatientData(address)": FunctionFragment;
    "UserMapping(address)": FunctionFragment;
    "assignDoctor(address,address)": FunctionFragment;
    "doctormapping(address)": FunctionFragment;
    "doctorsList(uint256)": FunctionFragment;
    "getDoctorPatients(address)": FunctionFragment;
    "getDoctors()": FunctionFragment;
    "getPatients()": FunctionFragment;
    "getUserType(address)": FunctionFragment;
    "patientmapping(address)": FunctionFragment;
    "patientsList(uint256)": FunctionFragment;
    "setDoctorData(address,string,uint8,uint256,uint256)": FunctionFragment;
    "setPatientData(address,string,uint8,uint8,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PatientData"
      | "UserMapping"
      | "assignDoctor"
      | "doctormapping"
      | "doctorsList"
      | "getDoctorPatients"
      | "getDoctors"
      | "getPatients"
      | "getUserType"
      | "patientmapping"
      | "patientsList"
      | "setDoctorData"
      | "setPatientData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PatientData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "UserMapping",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assignDoctor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "doctormapping",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "doctorsList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDoctorPatients",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDoctors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPatients",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserType",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "patientmapping",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "patientsList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDoctorData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPatientData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "PatientData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UserMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doctormapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doctorsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDoctorPatients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDoctors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPatients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "patientmapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "patientsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDoctorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPatientData",
    data: BytesLike
  ): Result;

  events: {
    "viewData(string,uint8,uint8,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "viewData"): EventFragment;
}

export interface viewDataEventObject {
  name: string;
  age: number;
  weight: number;
  w3name: string;
}
export type viewDataEvent = TypedEvent<
  [string, number, number, string],
  viewDataEventObject
>;

export type viewDataEventFilter = TypedEventFilter<viewDataEvent>;

export interface Hospital extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HospitalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PatientData(
      p_add: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    UserMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    assignDoctor(
      patient_address: PromiseOrValue<string>,
      doctor_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    doctormapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string, number, BigNumber, BigNumber] & {
        uid_check: boolean;
        d_add: string;
        uid: BigNumber;
        name: string;
        age: number;
        reg_no: BigNumber;
        ph_no: BigNumber;
      }
    >;

    doctorsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDoctorPatients(
      doc_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Hospital.PatientStructOutput[]]>;

    getDoctors(
      overrides?: CallOverrides
    ): Promise<[Hospital.DoctorStructOutput[]]>;

    getPatients(
      overrides?: CallOverrides
    ): Promise<[Hospital.PatientStructOutput[]]>;

    getUserType(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    patientmapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string, number, number, string] & {
        uid_check: boolean;
        p_add: string;
        uid: BigNumber;
        name: string;
        age: number;
        weight: number;
        w3name: string;
      }
    >;

    patientsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setDoctorData(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      age: PromiseOrValue<BigNumberish>,
      reg_no: PromiseOrValue<BigNumberish>,
      ph_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPatientData(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      age: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      w3name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PatientData(
    p_add: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  UserMapping(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  assignDoctor(
    patient_address: PromiseOrValue<string>,
    doctor_address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  doctormapping(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, string, number, BigNumber, BigNumber] & {
      uid_check: boolean;
      d_add: string;
      uid: BigNumber;
      name: string;
      age: number;
      reg_no: BigNumber;
      ph_no: BigNumber;
    }
  >;

  doctorsList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDoctorPatients(
    doc_address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Hospital.PatientStructOutput[]>;

  getDoctors(overrides?: CallOverrides): Promise<Hospital.DoctorStructOutput[]>;

  getPatients(
    overrides?: CallOverrides
  ): Promise<Hospital.PatientStructOutput[]>;

  getUserType(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  patientmapping(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, string, number, number, string] & {
      uid_check: boolean;
      p_add: string;
      uid: BigNumber;
      name: string;
      age: number;
      weight: number;
      w3name: string;
    }
  >;

  patientsList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setDoctorData(
    _address: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    age: PromiseOrValue<BigNumberish>,
    reg_no: PromiseOrValue<BigNumberish>,
    ph_no: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPatientData(
    _address: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    age: PromiseOrValue<BigNumberish>,
    weight: PromiseOrValue<BigNumberish>,
    w3name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PatientData(
      p_add: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    UserMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    assignDoctor(
      patient_address: PromiseOrValue<string>,
      doctor_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    doctormapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string, number, BigNumber, BigNumber] & {
        uid_check: boolean;
        d_add: string;
        uid: BigNumber;
        name: string;
        age: number;
        reg_no: BigNumber;
        ph_no: BigNumber;
      }
    >;

    doctorsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDoctorPatients(
      doc_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Hospital.PatientStructOutput[]>;

    getDoctors(
      overrides?: CallOverrides
    ): Promise<Hospital.DoctorStructOutput[]>;

    getPatients(
      overrides?: CallOverrides
    ): Promise<Hospital.PatientStructOutput[]>;

    getUserType(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    patientmapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string, number, number, string] & {
        uid_check: boolean;
        p_add: string;
        uid: BigNumber;
        name: string;
        age: number;
        weight: number;
        w3name: string;
      }
    >;

    patientsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setDoctorData(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      age: PromiseOrValue<BigNumberish>,
      reg_no: PromiseOrValue<BigNumberish>,
      ph_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPatientData(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      age: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      w3name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "viewData(string,uint8,uint8,string)"(
      name?: null,
      age?: null,
      weight?: null,
      w3name?: null
    ): viewDataEventFilter;
    viewData(
      name?: null,
      age?: null,
      weight?: null,
      w3name?: null
    ): viewDataEventFilter;
  };

  estimateGas: {
    PatientData(
      p_add: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    UserMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignDoctor(
      patient_address: PromiseOrValue<string>,
      doctor_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    doctormapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doctorsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDoctorPatients(
      doc_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDoctors(overrides?: CallOverrides): Promise<BigNumber>;

    getPatients(overrides?: CallOverrides): Promise<BigNumber>;

    getUserType(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    patientmapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    patientsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDoctorData(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      age: PromiseOrValue<BigNumberish>,
      reg_no: PromiseOrValue<BigNumberish>,
      ph_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPatientData(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      age: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      w3name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PatientData(
      p_add: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    UserMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assignDoctor(
      patient_address: PromiseOrValue<string>,
      doctor_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    doctormapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doctorsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDoctorPatients(
      doc_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDoctors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPatients(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserType(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    patientmapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    patientsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDoctorData(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      age: PromiseOrValue<BigNumberish>,
      reg_no: PromiseOrValue<BigNumberish>,
      ph_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPatientData(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      age: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      w3name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
